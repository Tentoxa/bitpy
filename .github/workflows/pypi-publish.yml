name: Python Package Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+a[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+b[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+rc[0-9]+'

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Extract version from tag
        id: extract_version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/v}
          echo "version=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Version is $TAG_NAME"

      - name: Check PyPI version
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ github.event.repository.name }}/json || echo "{}")
          latest_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_version" ]; then
            echo "Package not found on PyPI. Proceeding with first release."
            exit 0
          fi
          echo "Latest version on PyPI: $latest_version"
          NEW_VERSION=${GITHUB_REF#refs/tags/v}
          if [ "$(printf '%s\n' "$latest_version" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ]; then
            echo "Error: New version $NEW_VERSION is not greater than latest version $latest_version"
            exit 1
          fi

  release-build:
    needs: version-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel
      
      - name: Build package
        run: python -m build
      
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    needs: [version-check, release-build]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/${{ github.event.repository.name }}
    
    permissions:
      id-token: write
      contents: write
    
    steps:
      - name: Download release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
      
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${GITHUB_REF#refs/tags/} dist/* \
            --title "Release ${GITHUB_REF#refs/tags/}" \
            --generate-notes
